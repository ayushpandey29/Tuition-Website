{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Button}from'./Button';import'../css/Login.css';import{useNavigate}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Login=()=>{const[email,setEmail]=useState(\"\");// Store email input\nconst[password,setPassword]=useState(\"\");// Store password input\n// Hook for programmatic navigation between routes\nlet navigate=useNavigate();// Effect hook that runs when component mounts\nuseEffect(()=>{validateToken();// Check if user is already logged in\n},[]);// Empty dependency array means this runs only once\n/**\r\n     * Function to validate if user has a valid token stored locally\r\n     * For demo purposes, just check if user data exists\r\n     */async function validateToken(){// Get user info from browser's local storage\nvar user=JSON.parse(localStorage.getItem('user-info'));// Check if user data exists\nif(user!=null){// User already logged in, redirect to home\nnavigate(\"/\");}}/**\r\n     * Frontend-only login simulation\r\n     * Creates a mock user session for demo purposes\r\n     */async function login(){// Simple validation\nif(!email||!password){alert(\"Please fill in both email and password\");return;}// Create mock user data for frontend demo\nconst mockUserData={message:\"Login successful!\",token:{data:{id:1,name:\"Demo User\",email:email,phone:\"123-456-7890\",is_instructor:0},exp:Math.round(Date.now()/1000)+24*60*60// 24 hours from now\n}};// Store user info in localStorage for frontend demo\nlocalStorage.setItem('user-info',JSON.stringify(mockUserData));alert(\"Login successful! (Frontend Demo Mode)\");navigate(\"/\");}// Render the login form\nreturn/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Welcome Back\"}),/*#__PURE__*/_jsxs(\"form\",{action:\"\",className:\"form-control\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email*\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"email\",onChange:e=>setEmail(e.target.value)// Update email state on input change\n,id:\"email\",placeholder:\"Enter Your Email\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"Password*\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\",onChange:e=>setPassword(e.target.value)// Update password state on input change\n,id:\"password\",placeholder:\"Enter Your Password\"})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Button,{onClick:login,children:\"Login\"})})]})]})});};export default Login;","map":{"version":3,"names":["React","useEffect","useState","Button","useNavigate","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Login","email","setEmail","password","setPassword","navigate","validateToken","user","JSON","parse","localStorage","getItem","login","alert","mockUserData","message","token","data","id","name","phone","is_instructor","exp","Math","round","Date","now","setItem","stringify","children","className","action","htmlFor","type","onChange","e","target","value","placeholder","onClick"],"sources":["C:/Users/nitya/OneDrive/Desktop/Project/Tuition-Website/src/components/Login.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Button } from './Button';\r\nimport '../css/Login.css'\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState(\"\");       // Store email input\r\n    const [password, setPassword] = useState(\"\"); // Store password input\r\n    \r\n    // Hook for programmatic navigation between routes\r\n    let navigate = useNavigate();\r\n    \r\n    // Effect hook that runs when component mounts\r\n    useEffect(() => {\r\n        validateToken() // Check if user is already logged in\r\n    }, []); // Empty dependency array means this runs only once\r\n    \r\n    /**\r\n     * Function to validate if user has a valid token stored locally\r\n     * For demo purposes, just check if user data exists\r\n     */\r\n    async function validateToken() {\r\n        // Get user info from browser's local storage\r\n        var user = JSON.parse(localStorage.getItem('user-info'));\r\n        \r\n        // Check if user data exists\r\n        if (user != null) {\r\n            // User already logged in, redirect to home\r\n            navigate(\"/\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Frontend-only login simulation\r\n     * Creates a mock user session for demo purposes\r\n     */\r\n    async function login() {\r\n        // Simple validation\r\n        if (!email || !password) {\r\n            alert(\"Please fill in both email and password\");\r\n            return;\r\n        }\r\n\r\n        // Create mock user data for frontend demo\r\n        const mockUserData = {\r\n            message: \"Login successful!\",\r\n            token: {\r\n                data: {\r\n                    id: 1,\r\n                    name: \"Demo User\",\r\n                    email: email,\r\n                    phone: \"123-456-7890\",\r\n                    is_instructor: 0\r\n                },\r\n                exp: Math.round(Date.now() / 1000) + (24 * 60 * 60) // 24 hours from now\r\n            }\r\n        };\r\n\r\n        // Store user info in localStorage for frontend demo\r\n        localStorage.setItem('user-info', JSON.stringify(mockUserData));\r\n        \r\n        alert(\"Login successful! (Frontend Demo Mode)\");\r\n        navigate(\"/\");\r\n    }\r\n    \r\n    // Render the login form\r\n    return (\r\n        <>\r\n            {/* Main container for login form */}\r\n            <div className='container'>\r\n                <h1>Welcome Back</h1>\r\n                \r\n                {/* Login form - action is empty since we handle submission with JavaScript */}\r\n                <form action=\"\" className=\"form-control\">\r\n\r\n                    {/* Email input field */}\r\n                    <div>\r\n                        <label htmlFor=\"email\">Email*</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"email\" \r\n                            onChange={(e) => setEmail(e.target.value)} // Update email state on input change\r\n                            id=\"email\" \r\n                            placeholder=\"Enter Your Email\" \r\n                        />\r\n                    </div>\r\n\r\n                    {/* Password input field */}\r\n                    <div>\r\n                        <label htmlFor=\"password\">Password*</label>\r\n                        <input \r\n                            type=\"password\" \r\n                            name=\"password\" \r\n                            onChange={(e) => setPassword(e.target.value)} // Update password state on input change\r\n                            id=\"password\" \r\n                            placeholder=\"Enter Your Password\" \r\n                        />\r\n                    </div>\r\n\r\n                    {/* Login button - calls login function when clicked */}\r\n                    <div>\r\n                        <Button onClick={login}>Login</Button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}